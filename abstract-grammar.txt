// The program top AST node (a list of struct type declaration, list of variable declarations, list of FunDecl definition)
Program    ::= StructTypeDecl* VarDecl* FunDecl*


// Types
Type        ::= BaseType | PointerType | StructType | ArrayType

BaseType    ::= INT | CHAR | VOID
PointerType ::= Type              // use to represent pointers to other types
StructType  ::= String            // represent a struct type (the String is the name of the declared struct type)
ArrayType   ::= Type int          // Type represent the element type, int represents the number of elements (number of elements)

// Struct declaration
StructTypeDecl ::= StructType VarDecl*

// Variable declaration
VarDecl    ::= Type String

// FunDecl definition (the String is the name of the FunDecl)
FunDecl  ::= Type String VarDecl* Block


// Expressions
Expr       ::= IntLiteral | StrLiteral | ChrLiteral | VarExpr | FunCallExpr | BinOp | ArrayAccessExpr | FieldAccessExpr | ValueAtExpr | SizeOfExpr | TypecastExpr

// Literals
IntLiteral ::= int     // int stores the value of the integer
StrLiteral ::= String  // String stored the value of the String
ChrLiteral ::= char    // char stores the value of the character

// Variable (the String is the name of the variable)
VarExpr     ::= String

// Function call (the String corresponds to the name of the function to call and the Expr* is the list of arguments)
FunCallExpr ::= String Expr*

// Binary operations
BinOp      ::= Expr Op Expr
Op         ::= ADD | SUB | MUL | DIV | MOD | GT | LT | GE | LE | NE | EQ | OR | AND

// Array access expression : Expr[Expr] (e.g. a[10])
ArrayAccessExpr ::= Expr Expr // the first Expr is the array, the second one the index

// Field access expression : Expr.String (e.g. *a.b)
FieldAccessExpr ::= Expr String // the Expr represents the structure, the String represents the name of the field

// Value at expression : *Expr (e.g. *p)
ValueAtExpr ::= Expr

// Sizeof expression : sizeof(Type) (e.g. sizeof(int*))
SizeOfExpr ::= Type

// Typecast expression : (Type)Expr (e.g. (int*) malloc(4))
TypecastExpr ::= Type Expr



// Statements
Stmt       ::= Block | While | If | Assign | Return | ExprStmt

// An expression statement (e.g. x+2;)
ExprStmt ::= Expr

// While loop statement : while (Expr) Stmt;
While      ::= Expr Stmt

// If statement: if (Expr) Stmt1 else Stmt2; (if the second Stmt is null, this means there is no else part)
If         ::= Expr Stmt [Stmt]

// Assignment statement: Expr = Expr; (e.g. x[3] = 2;)
Assign     ::= Expr Expr

// Return statement : (the Expr is optional)
Return     ::= [Expr]

// Block statement (starts with { and end with } in the source code)
Block      ::= VarDecl* Stmt*
