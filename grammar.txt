# #  comment
# () grouping
# [] optional
# *  zero or more
# +  one or more
# |  alternative


program    ::= (include)* (structdecl)* (vardecl)* (fundecl)* EOF

include    ::= "#include" STRING_LITERAL

structdecl ::= structtype "{" (vardecl)+ "}" ";"    # structure declaration

vardecl    ::= type IDENT ";"                       # normal declaration, e.g. int a;
             | type IDENT "[" INT_LITERAL "]" ";"   # array declaration, e.g. int a[2];

fundecl    ::= type IDENT "(" params ")" block    # function declaration

type       ::= ("int" | "char" | "void" | structtype) ["*"]
structtype ::= "struct" IDENT

params     ::= [ type IDENT ("," type IDENT)* ]

stmt       ::= block
             | "while" "(" exp ")" stmt              # while loop
             | "if" "(" exp ")" stmt ["else" stmt]   # if then else
             | "return" [exp] ";"                    # return
             | exp "=" exp ";"                      # assignment
             | exp ";"                               # expression statement, e.g. a function call

block      ::= "{" (vardecl)* (stmt)* "}"



exp        ::= binaryop

binaryop  ::= unaryop binaryop'
binaryop' ::= unaryop 
              | or eps

or    ::= and or'
or'   ::= "||" and or'
          | eps 
          

and   ::= releq and'
and'  ::= "&&" releq and' 
          | eps

releq   ::= relcomp releq'
releq'  ::= ("=="|"!=") relcomp releq'
            | eps

relcomp   ::= summative relcomp' 
relcomp'  ::= ("<"|"<="|">"|">=") summative relcomp'
              | eps
              
summative   ::= multi summative'
summative'  ::= ("+"|"-") multi summative'
          | eps

multi    ::= sizeof multi'
multi'   ::= ("*"|"/"|"%") sizeof multi'
                          | eps

unarysecondary  ::= unaryprimary
                    | "sizeof" "(" type ")" unarysecondary  # size of type
                    | "*" valueat unarysecondary            # pointer indirection
                    | "(" type ")" typecast unarysecondary  # typecast
                    | "-" unarysecondary                    # negation

unaryprimary    ::= terminalexpr unaryprimary'
unaryprimary'   ::=  
                    | IDENT "(" [ exp ("," exp)* ] ")"  # function call
                    | "[" exp "]"                       # array access
                    | "." IDENT                         # field access
                    | eps

terminalexpr ::= "(" exp ")"
              | IDENT 
              | INT_LITERAL
              | CHAR_LITERAL
              | STRING_LITERAL
              | funcall
