# #  comment
# () grouping
# [] optional
# *  zero or more
# +  one or more
# |  alternative


program    ::= (include)* (structdecl)* (vardecl)* (fundecl)* EOF

include    ::= "#include" STRING_LITERAL

structdecl ::= structtype "{" (vardecl)+ "}" ";"    # structure declaration

vardecl    ::= type IDENT (";" |                       # normal declaration, e.g. int a;
                            "[" INT_LITERAL "]" ";")   # array declaration, e.g. int a[2];

fundecl    ::= type IDENT "(" params ")" block    # function declaration

type       ::= ("int" | "char" | "void" | structtype) ["*"]
structtype ::= "struct" IDENT

params     ::= [ type IDENT paramsRec ]
paramsRec  ::= ("," type IDENT)*

stmt       ::= block
             | "while" "(" exp ")" stmt              # while loop
             | "if" "(" exp ")" stmt ["else" stmt]   # if then else
             | "return" [exp] ";"                    # return
             | exp ("=" exp ";"             # assignment
                    | ";")                   # expression statement, e.g. a function call        

block      ::= "{" (vardecl)* (stmt)* "}"



exp        ::= or

or    ::= and or'
or'   ::= ["||" and or']


and   ::= releq and'
and'  ::= "&&" releq and' 
          | eps

releq   ::= relcomp releq'
releq'  ::= ("=="|"!=") relcomp releq'
            | eps

relcomp   ::= summative relcomp' 
relcomp'  ::= ("<"|"<="|">"|">=") summative relcomp'
              | eps
              
summative   ::= multi summative'
summative'  ::= ("+"|"-") multi summative'
          | eps

multi    ::= unarysecondary multi'
multi'   ::= ("*"|"/"|"%") unarysecondary multi'
                          | eps

unarysecondary  ::= unaryprimary
                    | sizeof
                    | valueat    
                    | typecast  
                    | negation                

unaryprimary    ::=  arrayaccess 
                     | fieldaccess 
                     | funcall
                     | terminalexpr

terminalexpr ::= "(" exp ")"
              | IDENT 
              | INT_LITERAL
              | CHAR_LITERAL
              | STRING_LITERAL

funcall      ::= IDENT "(" [exp funcallargs] ")"
funcallargs  ::= ("," exp)*

arrayaccess  ::= terminalexpr "[" exp "]"                  # array access
fieldaccess  ::= terminalexpr "." IDENT                    # structure field member access
valueat      ::= "*" exp                          # Value at operator (pointer indirection)
sizeof       ::= "sizeof" "(" type ")"            # size of type
typecast     ::= "(" type ")"  exp                 # type casting
negation     ::= "-" exp
